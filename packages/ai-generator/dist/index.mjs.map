{"version":3,"sources":["../src/templates.ts","../src/ai-engine.ts","../src/file-system.ts","../src/index.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["import { ComponentGeneration, ComponentTemplate } from \"./types\"\n\nexport const RAYNAUI_COMPONENT_TEMPLATE = `\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst {{componentName}}Variants = cva(\n  \"{{baseClasses}}\",\n  {\n    {{#if hasVariants}}\n    variants: {\n      {{#each variants}}\n      {{name}}: {\n        {{#each values}}\n        \"{{this}}\": \"{{this}}-classes\",\n        {{/each}}\n      },\n      {{/each}}\n    },\n    defaultVariants: {\n      {{#each variants}}\n      {{name}}: \"{{defaultValue}}\",\n      {{/each}}\n    },\n    {{/if}}\n  }\n)\n\nexport interface {{componentName}}Props\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof {{componentName}}Variants> {\n  {{#each props}}\n  /** {{description}} */\n  {{name}}{{#unless required}}?{{/unless}}: {{type}}{{#if defaultValue}} = {{defaultValue}}{{/if}}\n  {{/each}}\n}\n\nconst {{componentName}} = React.forwardRef<HTMLDivElement, {{componentName}}Props>(\n  ({ className, {{#each variants}}{{name}}, {{/each}}{{#each props}}{{name}}, {{/each}}...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn({{componentName}}Variants({ {{#each variants}}{{name}}, {{/each}}className }))}\n        {{#each props}}\n        {{name}}={{{name}}}\n        {{/each}}\n        {...props}\n      />\n    )\n  }\n)\n{{componentName}}.displayName = \"{{componentName}}\"\n\nexport { {{componentName}}, {{componentName}}Variants }\n`\n\nexport const RAYNAUI_EXAMPLE_TEMPLATE = `import { {{componentName}} } from \"@/components/ui/{{componentNameLower}}\"\n\nexport default function {{componentName}}Example() {\n  return (\n    <div className=\"space-y-4\">\n      <{{componentName}}>\n        Default {{componentName}}\n      </{{componentName}}>\n      {{#each variants}}\n      <{{../componentName}} {{name}}=\"{{firstValue}}\">\n        {{name}} variant\n      </{{../componentName}}>\n      {{/each}}\n    </div>\n  )\n}\n`\n\nexport const RAYNAUI_TEST_TEMPLATE = `import { render, screen } from \"@testing-library/react\"\nimport { {{componentName}} } from \"@/components/ui/{{componentNameLower}}\"\n\ndescribe(\"{{componentName}}\", () => {\n  it(\"renders correctly\", () => {\n    render(<{{componentName}}>Test content</{{componentName}}>)\n    expect(screen.getByText(\"Test content\")).toBeInTheDocument()\n  })\n\n  {{#each variants}}\n  it(\"applies {{name}} variant correctly\", () => {\n    render(<{{../componentName}} {{name}}=\"{{firstValue}}\">Test</{{../componentName}}>)\n    const element = screen.getByText(\"Test\")\n    expect(element).toHaveClass(\"{{firstValue}}-classes\")\n  })\n  {{/each}}\n})\n`\n\nexport const RAYNAUI_DOCS_TEMPLATE = `---\ntitle: {{componentName}}\ndescription: {{description}}\n---\n\nThe {{componentName}} component provides {{description}}.\n\n## Usage\n\n\\`\\`\\`tsx\nimport { {{componentName}} } from \"@/components/ui/{{componentNameLower}}\"\n\nexport default function Example() {\n  return (\n    <{{componentName}}>\n      {{componentName}} content\n    </{{componentName}}>\n  )\n}\n\\`\\`\\`\n\n## Props\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n{{#each props}}\n| {{name}} | {{type}} | {{defaultValue}} | {{description}} |\n{{/each}}\n\n## Variants\n\n{{#each variants}}\n### {{name}}\n\n{{#each values}}\n- \\`{{this}}\\` - {{this}} variant\n{{/each}}\n\n{{/each}}\n\n## Examples\n\n{{#each examples}}\n{{this}}\n\n{{/each}}\n`\n\nexport function generateComponentTemplate(\n  generation: ComponentGeneration,\n  _options: { style?: string } = {}\n): ComponentTemplate {\n  const componentName = generation.name\n  const componentNameLower = componentName.charAt(0).toLowerCase() + componentName.slice(1)\n  \n  // Generate component code manually instead of using complex templates\n  let componentCode = `\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst ${componentName}Variants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background\",\n  {\n`\n\n  // Add variants if they exist\n  if (generation.variants && generation.variants.length > 0) {\n    componentCode += `    variants: {\n`\n    generation.variants.forEach(variant => {\n      componentCode += `      ${variant.name}: {\n`\n      variant.values.forEach(value => {\n        componentCode += `        \"${value}\": \"${value}-classes\",\n`\n      })\n      componentCode += `      },\n`\n    })\n    componentCode += `    },\n    defaultVariants: {\n`\n    generation.variants.forEach(variant => {\n      componentCode += `      ${variant.name}: \"${variant.defaultValue || variant.values[0]}\",\n`\n    })\n    componentCode += `    },\n`\n  }\n\n  componentCode += `  }\n)\n\nexport interface ${componentName}Props\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof ${componentName}Variants> {\n`\n\n  // Add props if they exist\n  if (generation.props && generation.props.length > 0) {\n    generation.props.forEach(prop => {\n      const required = prop.required ? \"\" : \"?\"\n      const defaultValue = prop.defaultValue ? ` = ${prop.defaultValue}` : \"\"\n      componentCode += `  /** ${prop.description || prop.name} */\n  ${prop.name}${required}: ${prop.type}${defaultValue}\n`\n    })\n  }\n\n  componentCode += `}\n\nconst ${componentName} = React.forwardRef<HTMLDivElement, ${componentName}Props>(\n  ({ className, ${generation.variants?.map(v => v.name).join(\", \") || \"\"}${generation.props?.map(p => p.name).join(\", \") || \"\"}...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(${componentName}Variants({ ${generation.variants?.map(v => v.name).join(\", \") || \"\"}className }))}\n        ${generation.props?.map(p => `${p.name}={${p.name}}`).join(\"\\n        \") || \"\"}\n        {...props}\n      />\n    )\n  }\n)\n${componentName}.displayName = \"${componentName}\"\n\nexport { ${componentName}, ${componentName}Variants }\n`\n\n  // Generate example\n  let exampleCode = `import { ${componentName} } from \"@/components/ui/${componentNameLower}\"\n\nexport default function ${componentName}Example() {\n  return (\n    <div className=\"space-y-4\">\n      <${componentName}>\n        Default ${componentName}\n      </${componentName}>\n`\n  \n  if (generation.variants && generation.variants.length > 0) {\n    generation.variants.forEach(variant => {\n      exampleCode += `      <${componentName} ${variant.name}=\"${variant.values[0]}\">\n        ${variant.name} variant\n      </${componentName}>\n`\n    })\n  }\n\n  exampleCode += `    </div>\n  )\n}\n`\n\n  // Generate test\n  let testCode = `import { render, screen } from \"@testing-library/react\"\nimport { ${componentName} } from \"@/components/ui/${componentNameLower}\"\n\ndescribe(\"${componentName}\", () => {\n  it(\"renders correctly\", () => {\n    render(<${componentName}>Test content</${componentName}>)\n    expect(screen.getByText(\"Test content\")).toBeInTheDocument()\n  })\n`\n  \n  if (generation.variants && generation.variants.length > 0) {\n    generation.variants.forEach(variant => {\n      testCode += `\n  it(\"applies ${variant.name} variant correctly\", () => {\n    render(<${componentName} ${variant.name}=\"${variant.values[0]}\">Test</${componentName}>)\n    const element = screen.getByText(\"Test\")\n    expect(element).toHaveClass(\"${variant.values[0]}-classes\")\n  })\n`\n    })\n  }\n\n  testCode += `})\n`\n\n  // Generate documentation\n  let docsCode = `---\ntitle: ${componentName}\ndescription: ${generation.description}\n---\n\nThe ${componentName} component provides ${generation.description}.\n\n## Usage\n\n\\`\\`\\`tsx\nimport { ${componentName} } from \"@/components/ui/${componentNameLower}\"\n\nexport default function Example() {\n  return (\n    <${componentName}>\n      ${componentName} content\n    </${componentName}>\n  )\n}\n\\`\\`\\`\n`\n\n  if (generation.props && generation.props.length > 0) {\n    docsCode += `\n## Props\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n`\n    generation.props.forEach(prop => {\n      docsCode += `| ${prop.name} | ${prop.type} | ${prop.defaultValue || \"-\"} | ${prop.description || prop.name} |\n`\n    })\n  }\n\n  if (generation.variants && generation.variants.length > 0) {\n    docsCode += `\n## Variants\n\n`\n    generation.variants.forEach(variant => {\n      docsCode += `### ${variant.name}\n\n`\n      variant.values.forEach(value => {\n        docsCode += `- \\`${value}\\` - ${value} variant\n`\n      })\n      docsCode += `\n`\n    })\n  }\n\n  docsCode += `\n## Examples\n\n${generation.examples?.join(\"\\n\\n\") || \"\"}\n`\n\n  return {\n    component: componentCode,\n    example: exampleCode,\n    test: testCode,\n    documentation: docsCode,\n  }\n} ","import Anthropic from \"@anthropic-ai/sdk\"\nimport { ComponentGeneration, AIGeneratorConfig, GenerationResult } from \"./types\"\nimport { generateComponentTemplate } from \"./templates\"\n\nexport class AIGeneratorEngine {\n  private client: Anthropic\n  private config: AIGeneratorConfig\n\n  constructor(config: AIGeneratorConfig = {}) {\n    this.config = {\n      model: \"claude-3-5-sonnet-20241022\",\n      temperature: 0.7,\n      maxTokens: 4000,\n      ...config,\n    }\n\n    if (this.config.apiKey) {\n      this.client = new Anthropic({\n        apiKey: this.config.apiKey,\n        baseURL: this.config.baseUrl,\n      })\n    } else {\n      throw new Error(\"API key is required for AI generation\")\n    }\n  }\n\n  async generateComponent(\n    prompt: string,\n    options: {\n      style?: string\n      includeExample?: boolean\n      includeTest?: boolean\n      includeDocumentation?: boolean\n    } = {}\n  ): Promise<GenerationResult> {\n    try {\n      const systemPrompt = this.buildSystemPrompt(options.style)\n      const userPrompt = this.buildUserPrompt(prompt, options)\n\n      const response = await this.client.messages.create({\n        model: this.config.model!,\n        max_tokens: this.config.maxTokens || 4000,\n        temperature: this.config.temperature,\n        system: systemPrompt,\n        messages: [\n          {\n            role: \"user\",\n            content: userPrompt,\n          },\n        ],\n      })\n\n      const content = response.content[0]\n      if (content.type !== \"text\") {\n        throw new Error(\"Unexpected response type from AI\")\n      }\n\n      // Parse the AI response to extract component generation data\n      const generation = this.parseAIResponse(content.text)\n      \n      // Generate the component template\n      const template = generateComponentTemplate(generation, { style: options.style })\n\n      // Create the component structure\n      const component = {\n        name: generation.name,\n        description: generation.description,\n        type: \"components:ui\",\n        files: [\n          {\n            path: `components/ui/${generation.name.toLowerCase()}.tsx`,\n            content: template.component,\n            type: \"registry:component\",\n          },\n        ],\n        dependencies: generation.dependencies || [],\n        registryDependencies: generation.registryDependencies || [\"utils\"],\n      }\n\n      // Add additional files based on options\n      if (options.includeExample && template.example) {\n        component.files.push({\n          path: `app/(app)/examples/${generation.name.toLowerCase()}/page.tsx`,\n          content: template.example,\n          type: \"registry:page\",\n        })\n      }\n\n      if (options.includeTest && template.test) {\n        component.files.push({\n          path: `__tests__/${generation.name.toLowerCase()}.test.tsx`,\n          content: template.test,\n          type: \"registry:file\",\n        })\n      }\n\n      if (options.includeDocumentation && template.documentation) {\n        component.files.push({\n          path: `content/docs/components/${generation.name.toLowerCase()}.mdx`,\n          content: template.documentation,\n          type: \"registry:file\",\n        })\n      }\n\n      return {\n        success: true,\n        component,\n        files: component.files.map(file => ({\n          path: file.path,\n          content: file.content,\n        })),\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error occurred\",\n      }\n    }\n  }\n\n  private buildSystemPrompt(_style: string = \"new-york\"): string {\n    return `You are an expert React component generator specializing in RaynaUI components. You understand RaynaUI's design patterns, component structure, and best practices.\n\nYour task is to generate RaynaUI-style components based on user descriptions. You must follow these guidelines:\n\n1. **Component Structure**: Use the standard RaynaUI component pattern with:\n   - \"use client\" directive\n   - React.forwardRef for proper ref forwarding\n   - class-variance-authority (cva) for variants\n   - TypeScript interfaces extending HTMLAttributes\n   - Proper displayName\n\n2. **Styling**: Use Tailwind CSS classes following RaynaUI conventions:\n   - Consistent spacing and sizing\n   - Proper color schemes\n   - Accessibility-focused design\n   - Responsive design patterns\n\n3. **Variants**: Use class-variance-authority for component variants:\n   - Common variants: variant (default, secondary, destructive, outline, ghost, link)\n   - Size variants: size (default, sm, lg, xl)\n   - State variants: disabled, loading, etc.\n\n4. **Props**: Include relevant props with proper TypeScript types:\n   - children for content\n   - className for custom styling\n   - Event handlers (onClick, onChange, etc.)\n   - Component-specific props\n\n5. **Accessibility**: Ensure components are accessible:\n   - Proper ARIA attributes\n   - Keyboard navigation support\n   - Focus management\n   - Screen reader compatibility\n\n6. **Dependencies**: Include necessary dependencies:\n   - class-variance-authority\n   - lucide-react (for icons)\n   - framer-motion (for animations, if needed)\n\nRespond with a JSON object containing the component specification in this format:\n{\n  \"name\": \"ComponentName\",\n  \"description\": \"Brief description of the component\",\n  \"props\": [\n    {\n      \"name\": \"propName\",\n      \"type\": \"string | number | boolean\",\n      \"required\": true/false,\n      \"description\": \"Prop description\",\n      \"defaultValue\": \"default value if any\"\n    }\n  ],\n  \"variants\": [\n    {\n      \"name\": \"variantName\",\n      \"values\": [\"value1\", \"value2\"],\n      \"defaultValue\": \"value1\"\n    }\n  ],\n  \"dependencies\": [\"dependency1\", \"dependency2\"],\n  \"registryDependencies\": [\"utils\", \"button\"]\n}`\n  }\n\n  private buildUserPrompt(prompt: string, options: any): string {\n    return `Generate a RaynaUI component based on this description:\n\n${prompt}\n\nPlease provide the component specification in JSON format as described in the system prompt.\n\nAdditional requirements:\n- Style: ${options.style || \"new-york\"}\n- Include example: ${options.includeExample || false}\n- Include test: ${options.includeTest || false}\n- Include documentation: ${options.includeDocumentation || false}\n\nRespond only with the JSON specification, no additional text.`\n  }\n\n  private parseAIResponse(response: string): ComponentGeneration {\n    try {\n      // Extract JSON from the response\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/)\n      if (!jsonMatch) {\n        throw new Error(\"No JSON found in AI response\")\n      }\n\n      const parsed = JSON.parse(jsonMatch[0])\n      \n      // Validate and transform the response\n      return {\n        name: parsed.name,\n        description: parsed.description,\n        props: parsed.props || [],\n        variants: parsed.variants || [],\n        dependencies: parsed.dependencies || [],\n        registryDependencies: parsed.registryDependencies || [\"utils\"],\n      }\n    } catch (error) {\n      throw new Error(`Failed to parse AI response: ${error instanceof Error ? error.message : \"Unknown error\"}`)\n    }\n  }\n\n  async generateMultipleComponents(\n    prompts: string[],\n    options: any = {}\n  ): Promise<GenerationResult[]> {\n    const results: GenerationResult[] = []\n    \n    for (const prompt of prompts) {\n      const result = await this.generateComponent(prompt, options)\n      results.push(result)\n    }\n    \n    return results\n  }\n} ","import fs from \"fs-extra\"\nimport path from \"path\"\nimport { GenerationResult } from \"./types\"\n\nexport class FileSystemManager {\n  private baseDir: string\n\n  constructor(baseDir: string = process.cwd()) {\n    this.baseDir = baseDir\n  }\n\n  async writeGeneratedComponent(result: GenerationResult, options: {\n    outputDir?: string\n    overwrite?: boolean\n  } = {}): Promise<{\n    success: boolean\n    files: string[]\n    errors: string[]\n  }> {\n    const outputDir = options.outputDir || this.baseDir\n    const files: string[] = []\n    const errors: string[] = []\n\n    if (!result.success || !result.files) {\n      return {\n        success: false,\n        files: [],\n        errors: [\"No files to write\"],\n      }\n    }\n\n    for (const file of result.files) {\n      try {\n        const filePath = path.join(outputDir, file.path)\n        const dirPath = path.dirname(filePath)\n\n        // Create directory if it doesn't exist\n        await fs.ensureDir(dirPath)\n\n        // Check if file exists and handle overwrite\n        if (await fs.pathExists(filePath) && !options.overwrite) {\n          errors.push(`File already exists: ${file.path} (use --overwrite to overwrite)`)\n          continue\n        }\n\n        // Write the file\n        await fs.writeFile(filePath, file.content, \"utf-8\")\n        files.push(file.path)\n\n        console.log(`✅ Created: ${file.path}`)\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : \"Unknown error\"\n        errors.push(`Failed to write ${file.path}: ${errorMessage}`)\n      }\n    }\n\n    return {\n      success: errors.length === 0,\n      files,\n      errors,\n    }\n  }\n\n  async writeMultipleComponents(\n    results: GenerationResult[],\n    options: {\n      outputDir?: string\n      overwrite?: boolean\n    } = {}\n  ): Promise<{\n    success: boolean\n    totalFiles: number\n    errors: string[]\n  }> {\n    let totalFiles = 0\n    const allErrors: string[] = []\n\n    for (const result of results) {\n      const writeResult = await this.writeGeneratedComponent(result, options)\n      totalFiles += writeResult.files.length\n      allErrors.push(...writeResult.errors)\n    }\n\n    return {\n      success: allErrors.length === 0,\n      totalFiles,\n      errors: allErrors,\n    }\n  }\n\n  async createProjectStructure(baseDir: string): Promise<void> {\n    const structure = [\n      \"components/ui\",\n      \"app/(app)/examples\",\n      \"__tests__\",\n      \"content/docs/components\",\n      \"lib\",\n    ]\n\n    for (const dir of structure) {\n      await fs.ensureDir(path.join(baseDir, dir))\n    }\n\n    // Create utils.ts if it doesn't exist\n    const utilsPath = path.join(baseDir, \"lib/utils.ts\")\n    if (!(await fs.pathExists(utilsPath))) {\n      const utilsContent = `import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}`\n      await fs.writeFile(utilsPath, utilsContent, \"utf-8\")\n    }\n  }\n\n  async validateProjectStructure(baseDir: string): Promise<{\n    valid: boolean\n    missing: string[]\n  }> {\n    const requiredDirs = [\n      \"components/ui\",\n      \"lib\",\n    ]\n\n    const missing: string[] = []\n\n    for (const dir of requiredDirs) {\n      const dirPath = path.join(baseDir, dir)\n      if (!(await fs.pathExists(dirPath))) {\n        missing.push(dir)\n      }\n    }\n\n    // Check for utils.ts\n    const utilsPath = path.join(baseDir, \"lib/utils.ts\")\n    if (!(await fs.pathExists(utilsPath))) {\n      missing.push(\"lib/utils.ts\")\n    }\n\n    return {\n      valid: missing.length === 0,\n      missing,\n    }\n  }\n\n  async readExistingComponent(componentName: string, baseDir: string): Promise<string | null> {\n    const componentPath = path.join(baseDir, \"components/ui\", `${componentName.toLowerCase()}.tsx`)\n    \n    try {\n      if (await fs.pathExists(componentPath)) {\n        return await fs.readFile(componentPath, \"utf-8\")\n      }\n    } catch (error) {\n      console.warn(`Failed to read existing component: ${error}`)\n    }\n\n    return null\n  }\n\n  async backupExistingFile(filePath: string): Promise<string | null> {\n    try {\n      if (await fs.pathExists(filePath)) {\n        const backupPath = `${filePath}.backup.${Date.now()}`\n        await fs.copy(filePath, backupPath)\n        return backupPath\n      }\n    } catch (error) {\n      console.warn(`Failed to backup file: ${error}`)\n    }\n\n    return null\n  }\n\n  async cleanupBackups(baseDir: string): Promise<void> {\n    try {\n      const files = await fs.readdir(baseDir, { recursive: true })\n      const backupFiles = files.filter((file: string | Buffer) => \n        typeof file === \"string\" && file.includes(\".backup.\")\n      ) as string[]\n\n      for (const backupFile of backupFiles) {\n        const backupPath = path.join(baseDir, backupFile)\n        await fs.remove(backupPath)\n        console.log(`🗑️  Removed backup: ${backupFile}`)\n      }\n    } catch (error) {\n      console.warn(`Failed to cleanup backups: ${error}`)\n    }\n  }\n} ","// Import types first\nimport type {\n  GenerationOptions,\n  AIGeneratorConfig,\n  GenerationResult,\n} from \"./types\"\n\n// Import classes\nimport { AIGeneratorEngine } from \"./ai-engine\"\nimport { FileSystemManager } from \"./file-system\"\n\n// Main exports\nexport { AIGeneratorEngine } from \"./ai-engine\"\nexport { FileSystemManager } from \"./file-system\"\nexport { generateComponentTemplate } from \"./templates\"\n\n// Types\nexport type {\n  ComponentGeneration,\n  ComponentTemplate,\n  GenerationOptions,\n  RaynaUIComponent,\n  AIGeneratorConfig,\n  GenerationResult,\n} from \"./types\"\n\n// Main generator class that combines everything\nexport class RaynaUIAIGenerator {\n  private engine: AIGeneratorEngine\n  private fsManager: FileSystemManager\n\n  constructor(config: AIGeneratorConfig = {}) {\n    this.engine = new AIGeneratorEngine(config)\n    this.fsManager = new FileSystemManager()\n  }\n\n  async generateComponent(\n    prompt: string,\n    options: GenerationOptions = {\n      style: \"new-york\",\n      includeTypes: true,\n      includeStyles: true,\n      includeExample: true,\n      includeTest: false,\n      includeDocumentation: true,\n      overwrite: false,\n    }\n  ): Promise<GenerationResult> {\n    return this.engine.generateComponent(prompt, options)\n  }\n\n  async generateAndWriteComponent(\n    prompt: string,\n    options: GenerationOptions = {\n      style: \"new-york\",\n      includeTypes: true,\n      includeStyles: true,\n      includeExample: true,\n      includeTest: false,\n      includeDocumentation: true,\n      overwrite: false,\n    }\n  ): Promise<{\n    generation: GenerationResult\n    files: string[]\n    errors: string[]\n  }> {\n    const generation = await this.generateComponent(prompt, options)\n    const writeResult = await this.fsManager.writeGeneratedComponent(generation, {\n      outputDir: options.outputDir,\n      overwrite: options.overwrite,\n    })\n\n    return {\n      generation,\n      files: writeResult.files,\n      errors: writeResult.errors,\n    }\n  }\n\n  async generateMultipleComponents(\n    prompts: string[],\n    options: GenerationOptions = {\n      style: \"new-york\",\n      includeTypes: true,\n      includeStyles: true,\n      includeExample: true,\n      includeTest: false,\n      includeDocumentation: true,\n      overwrite: false,\n    }\n  ): Promise<GenerationResult[]> {\n    return this.engine.generateMultipleComponents(prompts, options)\n  }\n\n  async generateAndWriteMultipleComponents(\n    prompts: string[],\n    options: GenerationOptions = {\n      style: \"new-york\",\n      includeTypes: true,\n      includeStyles: true,\n      includeExample: true,\n      includeTest: false,\n      includeDocumentation: true,\n      overwrite: false,\n    }\n  ): Promise<{\n    generations: GenerationResult[]\n    totalFiles: number\n    errors: string[]\n  }> {\n    const generations = await this.generateMultipleComponents(prompts, options)\n    const writeResult = await this.fsManager.writeMultipleComponents(generations, {\n      outputDir: options.outputDir,\n      overwrite: options.overwrite,\n    })\n\n    return {\n      generations,\n      totalFiles: writeResult.totalFiles,\n      errors: writeResult.errors,\n    }\n  }\n\n  async initializeProject(outputDir: string = \".\"): Promise<void> {\n    await this.fsManager.createProjectStructure(outputDir)\n  }\n\n  async validateProject(outputDir: string = \".\"): Promise<{\n    valid: boolean\n    missing: string[]\n  }> {\n    return this.fsManager.validateProjectStructure(outputDir)\n  }\n}\n\n// Convenience function for quick generation\nexport async function generateRaynaUIComponent(\n  prompt: string,\n  config: AIGeneratorConfig = {},\n  options: GenerationOptions = {\n    style: \"new-york\",\n    includeTypes: true,\n    includeStyles: true,\n    includeExample: true,\n    includeTest: false,\n    includeDocumentation: true,\n    overwrite: false,\n  }\n): Promise<GenerationResult> {\n  const generator = new RaynaUIAIGenerator(config)\n  return generator.generateComponent(prompt, options)\n}\n\n// Convenience function for quick generation and writing\nexport async function generateAndWriteRaynaUIComponent(\n  prompt: string,\n  config: AIGeneratorConfig = {},\n  options: GenerationOptions = {\n    style: \"new-york\",\n    includeTypes: true,\n    includeStyles: true,\n    includeExample: true,\n    includeTest: false,\n    includeDocumentation: true,\n    overwrite: false,\n  }\n): Promise<{\n  generation: GenerationResult\n  files: string[]\n  errors: string[]\n}> {\n  const generator = new RaynaUIAIGenerator(config)\n  return generator.generateAndWriteComponent(prompt, options)\n} "]}